We are going to store all of our contracts in the src directory.
Test is where we'll put code to test what's in src 
script is where we'll put code that interacts with our contract in src.
foundry.toml let's us update config for foundry.

We are turning on FormatOnSave to format as we go automatically in the vs code settings.
use >format to format your code
in the "out" directory, is a json file with all of the metadata about a transaction including ABI
In Remix, we often deployed code to a remix VM. To do it in foundry:
Begin a local evm environment deployment by using the anvil command in the terminal.

Next let's study injecting a web3 provider. We're going to add the locally running anvil network to a browser metamask.
Get the network info from anvil, open metamask then add custom network.
Next in metamask you need to import account with the private key given by anvil

Now, to deploy contracts from forge:
in the terminal, type forge create SimpleStorage --interactive
Never use a private key in vscode, which might send data. If you need to deploy something with a private key, use your own bash terminal.

you NEVER want to have your private key in plain text.
Should not have private keys in shell or bash history
We will learn proper private key safety in the future.

We can also script deployment of our contracts. We want a continuous reproducable way to deploy our contracts, and we want future tests to test not just the code but the deployment process as well.

we are creating the script DeploySimpleStorage.s.sol to deploy the SimpleStorage.sol smart contract.
s.sol is a foundry convention for non smart contract solidity scripts.
CHECK SOLIDITY SCRIPTING TUTORIALS IN FOUNDRY WEBSITE!

In the lib folder are libraries of common scripts and tools used in Foundry. We will be using the script tool in the library for this deployment:

