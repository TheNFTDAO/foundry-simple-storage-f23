We are going to store all of our contracts in the src directory.
Test is where we'll put code to test what's in src 
script is where we'll put code that interacts with our contract in src.
foundry.toml let's us update config for foundry.

We are turning on FormatOnSave to format as we go automatically in the vs code settings.
use >format to format your code
in the "out" directory, is a json file with all of the metadata about a transaction including ABI
In Remix, we often deployed code to a remix VM. To do it in foundry:
Begin a local evm environment deployment by using the anvil command in the terminal.

Next let's study injecting a web3 provider. We're going to add the locally running anvil network to a browser metamask.
Get the network info from anvil, open metamask then add custom network.
Next in metamask you need to import account with the private key given by anvil

Now, to deploy contracts from forge:
in the terminal, type forge create SimpleStorage --interactive
Never use a private key in vscode, which might send data. If you need to deploy something with a private key, use your own bash terminal.

you NEVER want to have your private key in plain text.
Should not have private keys in shell or bash history
We will learn proper private key safety in the future.

We can also script deployment of our contracts. We want a continuous reproducable way to deploy our contracts, and we want future tests to test not just the code but the deployment process as well.

we are creating the script DeploySimpleStorage.s.sol to deploy the SimpleStorage.sol smart contract.
s.sol is a foundry convention for non smart contract solidity scripts.
CHECK SOLIDITY SCRIPTING TUTORIALS IN FOUNDRY WEBSITE!

In the lib folder are libraries of common scripts and tools used in Foundry. We will be using the script tool in the library for this deployment:

CONTRACT names have all first letters capitalized.
VARIABLE names always have the first letter of the first word lower case and all following capitalized.

If you don't specify your rpc, foundry will run your deployed script on a temporary anvil chain for the life of the deployment.
To pass an RPC url:

forge script script/DeploySimpleStorage.s.sol --rpc-url http://127.0.0.1:8545

This SIMULATES sending it to the RPC. to actually broadcast them, add --broadcast --private-key YOURPRIVATEKEYHERE
---------------------===================

What actually is sending a transaction all about?

The actual "transaction" we've just broadcast is the following:
{
      "hash": null,
      "transactionType": "CREATE",
      "contractName": "DeploySimpleStorage",
      "contractAddress": "0x5b73C5498c1E3b4dbA84de0F1833c4a029d90519",
      "function": null,
      "arguments": null,
      "transaction": {
        "type": "0x02",
        "from": "0x1804c8ab1f12e6bbf3894d4083f33e07309d1f38",
        "gas": "0x714d1",
        "value": "0x0",
        "data": "0x608060405234801561001057600080fd5b5061057f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80632e64cec11461005c5780632ebce631146100735780636057361d146100945780636f760f41146100a95780638bab8dd5146100bc575b600080fd5b6000545b6040519081526020015b60405180910390f35b610086610081366004610248565b6100e7565b60405161006a929190610285565b6100a76100a2366004610248565b600055565b005b6100a76100b7366004610362565b61019f565b6100606100ca3660046103a7565b805160208183018101805160028252928201919093012091525481565b600181815481106100f757600080fd5b6000918252602090912060029091020180546001820180549193509061011c906103e4565b80601f0160208091040260200160405190810160405280929190818152602001828054610148906103e4565b80156101955780601f1061016a57610100808354040283529160200191610195565b820191906000526020600020905b81548152906001019060200180831161017857829003601f168201915b5050505050905082565b6040805180820190915281815260208101838152600180548082018255600091909152825160029091027fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf68101918255915190917fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf70190610220908261046d565b50505080600283604051610234919061052d565b908152604051908190036020019020555050565b60006020828403121561025a57600080fd5b5035919050565b60005b8381101561027c578181015183820152602001610264565b50506000910152565b82815260406020820152600082518060408401526102aa816060850160208701610261565b601f01601f1916919091016060019392505050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126102e657600080fd5b813567ffffffffffffffff80821115610301576103016102bf565b604051601f8301601f19908116603f01168101908282118183101715610329576103296102bf565b8160405283815286602085880101111561034257600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561037557600080fd5b823567ffffffffffffffff81111561038c57600080fd5b610398858286016102d5565b95602094909401359450505050565b6000602082840312156103b957600080fd5b813567ffffffffffffffff8111156103d057600080fd5b6103dc848285016102d5565b949350505050565b600181811c908216806103f857607f821691505b60208210810361041857634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561046857600081815260208120601f850160051c810160208610156104455750805b601f850160051c820191505b8181101561046457828155600101610451565b5050505b505050565b815167ffffffffffffffff811115610487576104876102bf565b61049b8161049584546103e4565b8461041e565b602080601f8311600181146104d057600084156104b85750858301515b600019600386901b1c1916600185901b178555610464565b600085815260208120601f198616915b828110156104ff578886015182559484019460019091019084016104e0565b508582101561051d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000825161053f818460208701610261565b919091019291505056fea2646970667358221220082024ba773a3bab480084b688e6e95bbd477d9574b03d20af4266fed51d35fd64736f6c63430008130033",
        "nonce": "0x2",
        "accessList": []
      },
      "additionalContracts": [],
      "isFixedGasLimit": false
    }

    r, s, and v values allow our private key to sign our transaction.
    the value is a value in eth to deploy/send in the transaction
    nonce is a numbering system for transactions. 
    Anytime you change state on the blockchain, you use the above transaction type. The data field is what accomplishes everything done on the blockchain.

Let's learn how to not have our private key in the command line.
Only do this for your development environments. Do NOT do this in PRODUCTION!!!!!!!!!!!!!!!!!!!!!!
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
first we will create a .env file, and add .env to the gitignore!!
in the .env file, map
PRIVATE_KEY=yourprivatekey
RPC_URL=The url for either your testnet, node, or local VM.

Now when deploying our contract, our new command will look like this:

forge script script/DeploySimpleStorage.s.sol --rpc-url $RPC_URL --broadcast --private-key $PRIVATE_KEY

Now, when working with PRODUCTION CODE (What you will ALWAYS do regardless of whether you're in prod or not) for managing private keys is:

To store a private key in an encrypted and secure way to transact through foundry, first get the private key for the target wallet. Then run

cast wallet import --interactive <ACCOUNT_NAME>

Then paste the private key and keystore password. It will then give you the address for the wallet and tell you if it was saved successfully.

You will need to add the --account argument followed by the account name, and the --sender argument with the wallet address you'd like to send from. The new command will look like so:

forge script script/DeploySimpleStorage.s.sol --rpc-url $RPC_URL --account test --sender 0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266 --broadcast

Next, let's learn how to interact with contracts from the command line:

we will use the cast send command.

start with cast send --help

let's start by using the cast send transaction to send the store function for simple storage, to store a favorite number:
we'll do cast send (contract address) ("command(variable type)" argument for variable --rpc-url YOURRPC --account yourKeystoreAccount

cast send 0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9 "store(uint256)" 69 --rpc-url http://127.0.0.1:8545 --account test

Now to read off the blockchain, we will use cast call

cast call 0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9 "retrieve()"

we get the value 0x0000000000000000000000000000000000000000000000000000000000000045

Then use cast --to-base 0x0000000000000000000000000000000000000000000000000000000000000045 to confirm the favorite number is 69.

Next let's change our RPC URL to a testnet!

Go to infura and set up a new api key, put the url into the env file as SEPOLIA_RPC_URL.

ANYTIME you make changes to .env, run source .env
The mempool:
Where transactions temporarily live while they are waiting to be written on chain.

Explore the alchemy offerings<3

Verify your contracts on etherscan when you deploy them. (TBD)

